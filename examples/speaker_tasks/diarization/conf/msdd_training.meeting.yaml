name: &name "SpeakerNet"
sample_rate: &sample_rate 16000
repeat: &rep 2
dropout: &drop 0.5
separable: &separable True
n_filters: &n_filters 256
num_workers: &num_workers 20
batch_size: &global_bs 640

diarizer: &diarizer
  manifest_filepath: null
  out_dir: null
  oracle_vad: True # If True, uses RTTM files provided in manifest file to get speech activity (VAD) timestamps
  collar: 0.25 # Collar value for scoring
  ignore_overlap: True # Consider or ignore overlap segments while scoring

  vad:
    model_path: null # .nemo local model path or pretrained model name or none
    external_vad_manifest: null # This option is provided to use external vad and provide its speech activity labels for speaker embeddings extraction. Only one of model_path or external_vad_manifest should be set

    parameters: # Tuned parameter for CH109 (using the 11 multi-speaker sessions as dev set)
      window_length_in_sec: 0.15  # Window length in sec for VAD context input
      shift_length_in_sec: 0.01 # Shift length in sec for generate frame level VAD prediction
      smoothing: "median" # False or type of smoothing method (eg: median)
      overlap: 0.875 # Overlap ratio for overlapped mean/median smoothing filter
      onset: 0.4 # Onset threshold for detecting the beginning and end of a speech
      offset: 0.7 # Offset threshold for detecting the end of a speech
      pad_onset: 0.05 # Adding durations before each speech segment
      pad_offset: -0.1 # Adding durations after each speech segment
      min_duration_on: 0.2 # Threshold for small non_speech deletion
      min_duration_off: 0.2 # Threshold for short speech segment deletion
      filter_speech_first: True

  speaker_embeddings:
    model_path: "titanet_large"
    parameters:
      window_length_in_sec: [3.0,2.5,2.0,1.5,1.0,0.5]
      shift_length_in_sec: [1.5,1.25,1.0,0.75,0.5,0.25]
      multiscale_weights: [0.1,0.1,0.1,0.1,0.1,0.1]
      save_embeddings: True # Save embeddings as pickle file for each audio input.

  clustering:
    parameters:
      oracle_num_speakers: True  # If True, use num of speakers value provided in manifest file.
      max_num_speakers: 2 # Max number of speakers for each recording. If oracle num speakers is passed, this value is ignored.
      enhanced_count_thres: 80 # If the number of segments is lower than this number, enhanced speaker counting is activated.
      max_rp_threshold: 0.15 # Determines the range of p-value search: 0 < p <= max_rp_threshold.
      sparse_search_volume: 30 # The higher the number, the more values will be examined with more time.

ts_vad_model:
  base:
    name: *name
    sample_rate: *sample_rate
    repeat: *rep
    dropout: *drop
    separable: *separable
    n_filters: *n_filters
    num_workers: *num_workers
    batch_size: *global_bs
    diarizer: *diarizer
    soft_label_thres: &soft_label_thres 0.1
  max_num_of_spks: &max_num_of_spks 2
  scale_n: &scale_n 6
  subsample_rate: &subsample_rate 1
  split_length: 30

  train_ds:
    manifest_filepath: ???
    emb_dir: ???
    sample_rate: 16000
    num_spks: *max_num_of_spks
    soft_label_thres: *soft_label_thres
    labels: null
    batch_size: 2
    shuffle: True

  validation_ds:
    manifest_filepath: ???
    emb_dir: ???
    sample_rate: 16000
    num_spks: *max_num_of_spks
    soft_label_thres: *soft_label_thres
    labels: null
    batch_size: 2
    shuffle: False

  test_ds:
    manifest_filepath: ???
    emb_dir: ???
    sample_rate: 16000
    num_spks: *max_num_of_spks
    soft_label_thres: *soft_label_thres
    labels: null
    batch_size: 2
    shuffle: False

  preprocessor:
    _target_: nemo.collections.asr.modules.AudioToMelSpectrogramPreprocessor
    normalize: "per_feature"
    window_size: 0.02
    sample_rate: *sample_rate
    window_stride: 0.01
    window: "hann"
    features: &n_mels 64
    n_fft: 512
    frame_splicing: 1
    dither: 0.00001

  tsvad_module:
    _target_: nemo.collections.asr.modules.tsvad_diarizer.TSVAD_module
    num_spks: *max_num_of_spks
    hidden_size: 256
    num_lstm_layers: 2
    dropout_rate: 0.5
    cnn_output_ch: 16
    emb_sizes: 192
    scale_n: *scale_n
    #out_channels: [2,2,3,4]

  loss:
    scale: 30
    margin: 0.2

  optim:
    name: novograd
    # _target_: nemo.core.optim.optimizers.Novograd
    lr: .008
    # optimizer arguments
    betas: [0.8, 0.5]
    weight_decay: 0.001

    # scheduler setup
    sched:
      name: CosineAnnealing

      # pytorch lightning args
      # monitor: val_loss
      # reduce_on_plateau: false

      # Scheduler params
      warmup_steps: null
      warmup_ratio: null
      min_lr: 0.001
      last_epoch: -1
  #optim:
    #name: sgd
    #lr: .005
    #weight_decay: 0.0

    ## scheduler setup
    #sched:
      #name: CosineAnnealing
      #warmup_ratio: 0.1
      #min_lr: 0.0

trainer:
  gpus: 1 # number of gpus
  max_epochs: 1000000
  max_steps: 1000000000000 # computed at runtime if not set
  num_nodes: 1
  strategy: ddp
  accumulate_grad_batches: 1
  deterministic: True
  enable_checkpointing: False
  logger: False
  log_every_n_steps: 1  # Interval of logging.
  val_check_interval: 1.0  # Set to 0.25 to check 4 times per epoch, or an int for number of iterations

exp_manager:
  exp_dir: null
  name: *name
  create_tensorboard_logger: True
  create_checkpoint_callback: True
